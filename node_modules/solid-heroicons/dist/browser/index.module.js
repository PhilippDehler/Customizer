import { template, spread, insert, effect, setAttribute } from 'solid-js/web';
import { splitProps } from 'solid-js';

const _tmpl$ = template(`<svg></svg>`, 2);

/**
 * The Icon helper is just a SVG wrapper that can take any attributes
 * an SVG element can take plus a special props named `path` that reprensent
 * a string with the path(s) to insert within the SVG element.
 *
 * It will take the parent CSS `color` value as fill/stroke depending on
 * whether it's imported from `outline` or `solid`.
 *
 * @example
 * ```tsx
 * import { arrowLeft } from '@amoutonbrady/solid-heroicons/outline'
 * import { arrowRight } from '@amoutonbrady/solid-heroicons/solid'
 *
 * const icon = <Icon path={arrowLeft} class="text-gray-900 h-6" />
 * const icon2 = <Icon path={arrowRight} class=text-gray-900 h-6" />
 * ```
 */
const Icon = props => {
  const [internal, external] = splitProps(props, ["path"]);
  return (() => {
    const _el$ = _tmpl$.cloneNode(true);

    spread(_el$, external, true, true);

    insert(_el$, () => internal.path.path);

    effect(_p$ => {
      const _v$ = internal.path.outline ? "0 0 24 24" : "0 0 20 20",
            _v$2 = internal.path.outline ? "none" : "currentColor",
            _v$3 = internal.path.outline ? "currentColor" : "none";

      _v$ !== _p$._v$ && setAttribute(_el$, "viewBox", _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && _el$.style.setProperty("fill", _p$._v$2 = _v$2);
      _v$3 !== _p$._v$3 && _el$.style.setProperty("stroke", _p$._v$3 = _v$3);
      return _p$;
    }, {
      _v$: undefined,
      _v$2: undefined,
      _v$3: undefined
    });

    return _el$;
  })();
};

export { Icon };
//# sourceMappingURL=index.module.js.map
